---
title: "Untitled"
format: html
editor: visual
---

# Rémi's version

## Reconstructing abundance vectors

Using Single Value Decomposition

creation of dummy abundance vectors

```{r}
# Dummy data
a_i <- matrix(rpois(10,100))
a_j <- matrix(rpois(10,100))

print("original data")
(A_ij <- a_i %*% t(a_j))

# Décomposition en valeurs singulières (SVD)
svd_result <- svd(A_ij)

# Extraction de U, Sigma et V
U <- svd_result$u
Sigma <- diag(svd_result$d)
V <- svd_result$v

# Affichage des résultats
# print("Vecteurs ai:")
# print(U)
# print("Vecteurs aj:")
# print(V)
# print("Vecteurs sigma:")
# print(Sigma)


# Full reconstruction
print("reconstructed from SVD")
U %*% Sigma %*% t(V)

# Normally only the first column matters
print("reconstructed from first line SVD")
U[,1] %*% t(V[,1]) * Sigma[1,1]

# We can reconstruct up to a factor, but I don't know if it is possible to obtain the real distribution except by having som a priori on the abundances like saying that the consulmmers are 10 time more abundant than the resources
a_i - abs(U[,1] * sqrt(Sigma[1,1]))
U[,1]

a_j - abs(V[,1] * sqrt(Sigma[1,1]))
V[,1]
```

We are able to reconstruct perfectly the vectors!

However, as it is using an algorithm and not linear alegebra, we are not able to recover perfectly with only a value in the first column of sigma.{r}

```{r}
# Dummy data
a_i <- matrix(rpois(10,100))
a_j <- matrix(rpois(10,100))

print("original data")
(A_ij <- a_i %*% t(a_j))

M_tm <- matrix(runif(100, 0, 1), nrow = 10, ncol = 10, byrow = T)
M_obs <- A_ij %*% M_tm
```

```{r}
# Supposons que M_obs est votre matrice résultante du produit tensoriel
# et que A_ij et M_tm sont vos matrices d'origine
# Calcul de la SVD de M_obs
svd_result_obs <- svd(M_obs)

# Récupération de U, Sigma et V
U_obs <- svd_result_obs$u
Sigma_obs <- diag(svd_result_obs$d)
V_obs <- svd_result_obs$v

# Dimensions de A_ij et M_tm
dim_Aij <- dim(A_ij)
dim_Mtm <- dim(M_tm)

# Reconstruction de A_ij
U_Aij <- U_obs[, 1:dim_Aij[1]]
V_Aij <- V_obs[, 1:dim_Aij[2]]
Sigma_Aij <- Sigma_obs[1:dim_Aij[1], 1:dim_Aij[2]]
reconstructed_Aij <- U_Aij %*% Sigma_Aij %*% t(V_Aij)

# Reconstruction de M_tm
U_Mtm <- U_obs[, (dim_Aij[1] + 1):dim(U_obs)[2]]
V_Mtm <- V_obs[, (dim_Aij[2] + 1):dim(V_obs)[2]]
Sigma_Mtm <- Sigma_obs[(dim_Aij[1] + 1):dim_Aij[2], (dim_Aij[1] + 1):dim_Aij[2]]
reconstructed_Mtm <- U_Mtm %*% Sigma_Mtm %*% t(V_Mtm)

# Affichage des matrices reconstruites
print("Matrice A_ij reconstruite:")
print(reconstructed_Aij)
print("Matrice M_tm reconstruite:")
print(reconstructed_Mtm)
```
